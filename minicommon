(* this is from leetcode question  but the test case failed logic is correct *)
var getCommon = function(nums1, nums2) {
    const common = [];
  for (let i = 0; i < nums1.length; i++) {
    for (let j = 0; j < nums2.length; j++) {
      if (nums1[i] === nums2[j]) {
        common.push(nums1[i]);
        
        break;  
      }
    }
  }
  let lowestValue = common[0];
 
  for (let i = 1; i < common.length; i++) {
      console.log(common[i])
    if (common[i] < lowestValue) {
        
      lowestValue = common[i];
     
    }
  }
  return lowestValue;
}
console.log(getCommon([1,2,3],[2,4]))


leetcode solution
------------------
var getCommon = function(nums1, nums2) {
  const set = new Set(nums1);
  for (const n of nums2) {
    if (set.has(n)) return n;
  }
  return -1;
}

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.

----------------------------------------
Answer
--------------------
var intersection = function(nums1, nums2) {
      const set1 = new Set(nums1);
  const set2 = new Set(nums2);

  return [...set1].filter(value => set2.has(value));
};
  
